name: "Terraform"

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: Criando os recursos necess√°rios para os banco de dados.
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform apply -auto-approve -input=false

      - name: Update Pull Request Outputs
        # uses: actions/github-script@v6
        if: steps.apply.outcome == 'success'
        # env:
        #   PLAN: Mostra outputs do Terraform ap√≥s a aplica√ß√£o bem-sucedida.
        run: |
          echo "${{ steps.apply.outputs.stdout }}" | grep 'db_instance_endpoint' | awk '{print $3}'
        # with:
        #   github-token: ${{ secrets.GITHUB_TOKEN }}
          # script: |
            # const output = `
            # <details><summary>Show Output</summary>

            # \`\`\`terraform\n
            # ${{ steps.apply }}\
            # \`\`\`

            # </details>;

            # github.rest.issues.createComment({
            #   issue_number: context.issue.number,
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   body: output
            # })

      - name: Add initial item to DynamoDB "counters"
        if: steps.apply.outcome == 'success'
        run: |
          aws dynamodb put-item \
            --table-name counters \
            --item '{
              "name": {"S": "orderNumber"},
              "seq": {"N": "0"}
            }' \
            --region us-west-2

      - name: Extrair host do endpoint
        id: extrair_host
        if: steps.apply.outcome == 'success'
        run: echo "host=$(echo ${{ steps.apply.outputs.db_instance_endpoint }} | cut -d':' -f1)" >> $GITHUB_OUTPUT

      - name: Run SQL Migration
        if: steps.apply.outcome == 'success'
        env:
          PGHOST: ${{ steps.extrair_host.outputs.host }}
          PGUSER: "terraformAdmin"
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          PGDATABASE: "fiapdbPostgres"
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          psql -f ./initiate-postgres.sql
